library(gtools)
library(tidyverse)
source('../prob.R')
library(gtools)
library(tidyverse)
source('prob.R')
titanic_data = read("data/titanic.csv")
titanic_data = read("data/titanic.csv")
titanic_data = read_csv("data/titanic.csv")
View(titanic_data)
titanic_data %>%
distinct(class)
titanic_data %>%
mutate(is_passenger == if(class %in% c("1st","2nd","3rd")))
titanic_data %>%
mutate(is_passenger = if(class %in% c("1st","2nd","3rd")))
titanic_data %>%
mutate(is_passenger = if(class %in% c("1st","2nd","3rd"))
titanic_data %>%
mutate(is_passenger = if(class %in% c("1st","2nd","3rd")))
titanic_data %>%
mutate(status = ifelse(class %in% c("1st","2nd","3rd"),"passenger","crew"))
titanic_data %>%
mutate(status = ifelse(class %in% c("1st","2nd","3rd"),"passenger","crew"))
select(class,status)
titanic_data %>%
mutate(status = ifelse(class %in% c("1st","2nd","3rd"),"passenger","crew")) %>%
select(class,status)
titanic_data %>%
mutate(status = ifelse(class %in% c("1st","2nd","3rd"),"passenger","crew")) %>%
filter(status == "crew")
titanic_data %>%
mutate(status = ifelse(class %in% c("1st","2nd","3rd"),"passenger","crew")) %>%
filter(status == "crew") %>%
distinct(class)
titanic_data <- titanic_data %>%
mutate(status = ifelse(class %in% c("1st","2nd","3rd"),"passenger","crew")) %>%
filter(status == "crew") %>%
distinct(class)
library(gtools)
library(tidyverse)
source('prob.R')
titanic_data = read_csv("data/titanic.csv")
titanic_data %>%
distinct(class)
filter(status == "crew") %>%
distinct(class)
titanic_data %>%
filter(status == "crew") %>%
distinct(class)
library(gtools)
library(tidyverse)
source('prob.R')
titanic_data = read_csv("data/titanic.csv")
titanic_data %>%
distinct(class)
titanic_data %>%
filter(status == "crew") %>%
distinct(class)
titanic_data <- titanic_data %>%
mutate(status = ifelse(class %in% c("1st","2nd","3rd"),"passenger","crew")) %>%
titanic_data <- titanic_data %>%
mutate(status = ifelse(class %in% c("1st","2nd","3rd"),"passenger","crew"))
titanic_data %>%
filter(status == "crew") %>%
distinct(class)
#just check mutate worked
titanic_data %>%
filter(status == "crew") %>%
distinct(class)
titanic_data %>%
filter(status == "crew")
summarise(prob = sum(bio_sex == "male") /n())
titanic_data %>%
filter(status == "crew")
summarise(prob = sum(survived== "yes") /n())
prob_survived_given_crew <- titanic_data %>%
filter(status == "crew")
summarise(prob = sum(survived== "yes") /n())
prob_survived_given_crew <- titanic_data %>%
filter(status == "crew")
summarise(prob = sum(survived == "yes") /n())
prob_survived_given_crew <- titanic_data %>%
filter(status == "crew") %>%
summarise(prob = sum(survived == "yes") /n())
prob_survived_given_passenger <- titanic_data %>%
filter(status == "passenger") %>%
summarise(prob = sum(survived == "yes") /n())
prob_survived_given_crew
prob_survived_given_crew
prob_survived_given_passenger
View(prob_survived_given_crew)
roll_3_dice = rolldie(3)
6*6*6
roll_3_dice = rolldie(3)
nrow(roll_3_die)
roll_3_dice = rolldie(3)
nrow(roll_3_dice)
6^4
roll_4_dice = rolldie(4) %>%
mutate(die_tot = sumRows()) %>%
filter(roll_4_dice %in% (5,6,7))
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = sumRows()) #%>%
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = rowSums())  #%>%
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = rowSums(x.))  #%>%
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = rowSums(.))  #%>%
#filter(roll_4_dice %in% (5,6,7))
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = rowSums(.))  #%>%
#filter(roll_4_dice %in% (5,6,7))
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = rowSums())  #%>%
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = rowSums(.))  #%>%
#filter(roll_4_dice %in% (5,6,7))
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = rowSums(.))  #%>%
filter(roll_4_dice %in% (5,6,7))
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = rowSums(.))  #%>%
filter(die_tot %in% (5,6,7))
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = rowSums(.))  #%>%
filter(die_tot %in% (c(5,6,7)))
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = rowSums(.))  #%>%
filter(die_tot %in% (c(5,6,7)))
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = rowSums(.))  #%>%
filter(die_tot %in% (c(5,6,7)))
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = rowSums(.))  #%>%
filter(die_tot %in% c(5,6,7))
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = rowSums(.))  %>%
filter(die_tot %in% c(5,6,7))
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = rowSums(.))  %>%
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = rowSums(.))  %>%
roll_4_dice <- rolldie(4) %>%
mutate(die_tot = rowSums(.))
dice_bet_5_7 <- roll_4_dice %>%
filter(die_tot %in% c(5,6,7))
prob = nrow(dice_bet_5_7)/nrow(roll_4_dice)
prob = nrow(dice_bet_5_7)/nrow(roll_4_dice)
prob = nrow(dice_bet_5_7)/nrow(roll_4_dice)
prob
sum_bet_5_7 <- roll_4_dice %>%
filter(die_tot %in% c(5,6,7))
prob = nrow(sum_bet_5_7)/nrow(roll_4_dice)
prob
nrow(roll_4_dice)
nrow(sum_bet_5_7)
sum_bet_5_7 <- roll_4_dice %>%
filter(die_tot %in% c(5,6,7))
sum_bet_5_7
prob = nrow(sum_bet_5_7)/nrow(roll_4_dice)
prob
permutations <- as_tibble(permutations(n = 5, r = 5, v = person_height, repeats.allowed = TRUE))
person_height <- c("1", "2", "3", "4", "5")
# sit 5 at a time, r = 5
# repeats.allowed = FALSE - doesnt matter in this example as every chair is filled
permutations <- as_tibble(permutations(n = 5, r = 5, v = person_height, repeats.allowed = TRUE))
permutations <- as_tibble(permutations(n = 5, r = 5, v = person_height, repeats.allowed = TRUE))
person_height <- c("1", "2", "3", "4", "5")
filled
# create vector of choices contains ten employees, n = 10.
person_height <- c("H1", "H2", "H3", "H4", "H5")
# sit 5 at a time, r = 5
# repeats.allowed = FALSE - only one person per chair
permutations <- as_tibble(permutations(n = 5, r = 5, v = person_height, repeats.allowed = FALSE))
# filter
chairs <- [1:5]
# create vector of choices contains ten employees, n = 10.
person_height <- c("H1", "H2", "H3", "H4", "H5")
# sit 5 at a time, r = 5
# repeats.allowed = FALSE - only one person per chair
permutations <- as_tibble(permutations(n = 5, r = 1, v = person_height, repeats.allowed = FALSE))
# filter
chairs <- [1:5]
# create vector of choices contains ten employees, n = 10.
person_height <- c("H1", "H2", "H3", "H4", "H5")
# sit 5 at a time, r = 5
# repeats.allowed = FALSE - only one person per chair
permutations <- as_tibble(permutations(n = 5, r = 5, v = person_height, repeats.allowed = FALSE))
# filter
chairs <- [1:5]
=5*5
5*%
5*5
5*5*5
permutations
=5*4*3*2*1
5*4*3*2*1
permutations <- as_tibble(permutations(n = 5, r = 5, v = person_height, repeats.allowed = FALSE))
# create vector of choices contains ten employees, n = 10.
person_height <- c("H1", "H2", "H3", "H4", "H5")
# sit 5 at a time, r = 5
# repeats.allowed = FALSE - only one person per chair
permutations <- as_tibble(permutations(n = 5, r = 5, v = person_height, repeats.allowed = FALSE)) %>%
filter(V1 == "H5" & V2 == "H4" & V3 == "H3" & V4 == "H2" & V5 == "H1")
# filter
chairs <- [1:5]
person_height <- c("H1", "H2", "H3", "H4", "H5")
# sit 5 at a time, r = 5
# repeats.allowed = FALSE - only one person per chair
permutations <- as_tibble(permutations(n = 5, r = 5, v = person_height, repeats.allowed = FALSE)) %>%
prob = 1/nrow(permutations)
person_height <- c("H1", "H2", "H3", "H4", "H5")
# sit 5 at a time, r = 5
# repeats.allowed = FALSE - only one person per chair
permutations <- as_tibble(permutations(n = 5, r = 5, v = person_height, repeats.allowed = FALSE)) %>%
prob = 1/nrow(permutations)
# create vector of choices contains 5 people of heights H1 to H5
#H5 is the tallest and H1 is the smallest. n = 5
person_height <- c("H1", "H2", "H3", "H4", "H5")
# sit 5 at a time, r = 5
# repeats.allowed = FALSE - only one person per chair
chair_permutations <- as_tibble(permutations(n = 5, r = 5, v = person_height, repeats.allowed = FALSE)) %>%
prob = 1/nrow(permutations)
# create vector of choices contains 5 people of heights H1 to H5
#H5 is the tallest and H1 is the smallest. n = 5
person_height <- c("H1", "H2", "H3", "H4", "H5")
# sit 5 at a time, r = 5
# repeats.allowed = FALSE - only one person per chair
chair_permutations <- as_tibble(permutations(n = 5, r = 5, v = person_height, repeats.allowed = FALSE))
prob = 1/nrow(permutations)
prob = 1/nrow(permutations)
# create vector of choices contains 5 people of heights H1 to H5
#H5 is the tallest and H1 is the smallest. n = 5
person_height <- c("H1", "H2", "H3", "H4", "H5")
# sit 5 at a time, r = 5
# repeats.allowed = FALSE - only one person per chair
chair_permutations <- as_tibble(permutations(n = 5, r = 5, v = person_height, repeats.allowed = FALSE))
prob = 1/nrow(permutations)
prob
# create vector of choices contains 5 people of heights H1 to H5
#H5 is the tallest and H1 is the smallest. n = 5
person_height <- c("H1", "H2", "H3", "H4", "H5")
# sit 5 at a time, r = 5
# repeats.allowed = FALSE - only one person per chair
chair_permutations <- as_tibble(permutations(n = 5, r = 5, v = person_height, repeats.allowed = FALSE))
prob = 1/nrow(chair_permutations)
prob
1/120
1/factorial(6)
21/6
21/2
roll_6_dice <- rolldie(6)
mutate(die_tot = rowSums(.))
roll_6_dice <- rolldie(6) %>%
mutate(die_tot = rowSums(.))
roll_6_dice <- rolldie(6) %>%
mutate(die_tot = rowSums(.))
roll_6_dice
roll_6_dice <- rolldie(6) %>%
mutate(die_tot = rowSums(.))
filter(die_tot ==21)
roll_6_dice <- rolldie(6) %>%
mutate(die_tot = rowSums(.)) %>%
filter(die_tot ==21)
roll_6_dice
diff(6,6,6,1,1,1)
diff(c(6,6,6,1,1,1))
sum(abs(diff(c(6,6,6,1,1,1)))
roll_6_dice <- rolldie(6) %>%
roll_6_dice <- rolldie(6) %>%
mutate(die_check = sum(abs(diff(.))) %>%
#filter(die_check == 0)
roll_6_dice
roll_6_dice <- rolldie(6) %>%
mutate(die_check = sum(abs(diff(.)))) %>%
#filter(die_check == 0)
roll_6_dice
roll_6_dice <- rolldie(6)
roll_6_dice <- rolldie(6) %>%
mutate(die_check = sum(abs(diff(.))))
6-5-4-3-2-1
roll_6_dice <- rolldie(6) %>%
#mutate(die_check = sum(abs(diff(.))))
#filter(die_check == 0)
roll_6_dice
roll_6_dice <- rolldie(6) #%>%
#mutate(die_check = sum(abs(diff(.))))
#filter(die_check == 0)
roll_6_dice
dif(c(1,2,3,4,5,6))
diff(c(1,2,3,4,5,6))
abs(diff(c(1,2,3,4,5,6)))
sum(abs(diff(c(1,2,3,4,5,6))))
roll_6_dice <- rolldie(6) #%>%
mutate(die_check = length(unique(.)))
roll_6_dice <- rolldie(6) #%>%
mutate(die_check = length(unique(x.)))
roll_6_dice <- rolldie(6) #%>%
mutate(die_check = length(unique(c(V1,V2,V3,V4,V5))))
roll_6_dice <- rolldie(6) #%>%
mutate(die_check = length(unique(c(X1,X2,X3,X4,X5))))
roll_6_dice <- rolldie(6) #%>%
mutate(die_check = length(unique(rowwise(.))))
rowwise()
?rowwise
c_across
?c_across
roll_6_dice <- rolldie(6) #%>%
mutate(die_check = length(unique(c_across())))
roll_6_dice <- rolldie(6) #%>%
mutate(die_check = length(unique(c_across(everything()))))
roll_6_dice <- rolldie(6) #%>%
rowwise() %>%
mutate(die_check = length(unique(c_across(everything()))))
roll_6_dice
unique(roll_6_dice)
patch
?paste
roll_6_dice <- rolldie(6) #%>%
mutate(die_check = rowsum(.))
roll_6_dice <- rolldie(6) #%>%
mutate(die_check = rowSums(.))
roll_6_dice <- rolldie(6) #%>%
mutate(die_check = rowSums(.))
roll_6_dice <- rolldie(6) %>%
mutate(die_check = rowSums(.))
#filter(die_check == 0)
roll_6_dice
roll_6_dice <- rolldie(6) %>%
mutate(die_check = rowSums(.))
filter(die_check == 21)
roll_6_dice <- rolldie(6) %>%
mutate(die_check = rowSums(.)) %>%
filter(die_check == 21)
roll_6_dice
roll_6_dice <- rolldie(6) %>%
roll_6_dice
roll_6_dice <- rolldie(6)
roll_6_dice
factorial(6)
roll_6_dice <- rolldie(6)
roll_6_dice
6^6
1/6^6
roll_6_dice <- rolldie(6)
nrow(roll_6_dice)
6^6
# calculate event space
dice_permutations <- as_tibble(permutations(n = 6, r = 6, v = (c1:6), repeats.allowed = FALSE))
# calculate event space
dice_permutations <- as_tibble(permutations(n = 6, r = 6, v = (c(1:6)), repeats.allowed = FALSE))
# calculate event space
dice_permutations <- as_tibble(permutations(n = 6, r = 6, v = (c(1:6)), repeats.allowed = FALSE))
dice+permutations
# calculate event space
dice_permutations <- as_tibble(permutations(n = 6, r = 6, v = (c(1:6)), repeats.allowed = FALSE))
dice_permutations
prob = factorial(6)/6^6
prob <-  factorial(6)/6^6
prob <- factorial(6)/6^6
prob = nrow(dice_permutations)/nrow(roll_6_dice)
prob <- factorial(6)/6^6
prob <- nrow(dice_permutations)/nrow(roll_6_dice)
prob <- factorial(6)/6^6
prob
prob <- nrow(dice_permutations)/nrow(roll_6_dice)
prob
# calculate sample space (6^6)
roll_6_dice <- rolldie(6)
mutate(check = isin(., c(6,5,4,3,2,1), ordered = TRUE))
# calculate sample space (6^6)
roll_6_dice <- rolldie(6) %>%
mutate(check = isin(., c(6,5,4,3,2,1), ordered = TRUE))
nrow(roll_6_dice)
# calculate sample space (6^6)
roll_6_dice <- rolldie(6) %>%
mutate(check = isin(., c(6,5,4,3,2,1), ordered = TRUE))
roll_6_dice
# calculate sample space (6^6)
roll_6_dice <- rolldie(6) %>%
mutate(check = isin(., c(6,5,4,3,2,1), ordered = TRUE)) %>%
filter(check)
roll_6_dice
# calculate sample space (6^6)
roll_6_dice <- rolldie(6) %>%
mutate(check = isin(., c(6,5,4,3,2,1), ordered = FALSE)) %>%
filter(check)
roll_6_dice
# could use isin function
roll_6_dice <- rolldie(6) %>%
mutate(check = isin(., c(6,5,4,3,2,1), ordered = FALSE)) %>%
filter(check) %>%
summarise(prob = n()/nrow(roll_6_dice))
# could use isin function
roll_sample <- rolldie(6) %>%
mutate(check = isin(., c(6,5,4,3,2,1), ordered = FALSE)) %>%
filter(check) %>%
summarise(prob = n()/nrow(roll_6_dice))
# could use isin function
roll_sample <- rolldie(6) %>%
mutate(check = isin(., c(6,5,4,3,2,1), ordered = FALSE)) %>%
filter(check) %>%
summarise(prob = n()/nrow(roll_6_dice))
roll_sample
n()
# calculate sample space (6^6)
roll_6_dice <- rolldie(6) %>%
mutate(check = isin(., c(6,5,4,3,2,1), ordered = FALSE)) %>%
filter(check)
roll_6_dice
# calculate sample space (6^6)
roll_6_dice <- rolldie(6) %>%
roll_6_dice
# calculate sample space (6^6)
roll_6_dice <- rolldie(6)
roll_6_dice
# alternatively calculate event space (6!)
dice_permutations <- as_tibble(permutations(n = 6, r = 6, v = (c(1:6)), repeats.allowed = FALSE))
dice_permutations
prob <- factorial(6)/6^6
prob
prob <- nrow(dice_permutations)/nrow(roll_6_dice)
prob
# could use isin function
roll_sample <- rolldie(6) %>%
mutate(check = isin(., c(6,5,4,3,2,1), ordered = FALSE)) %>%
filter(check) %>%
summarise(prob = (n()/nrow(roll_6_dice))
roll_sample
# could use isin function
roll_sample <- rolldie(6) %>%
mutate(check = isin(., c(6,5,4,3,2,1), ordered = FALSE)) %>%
filter(check) %>%
summarise(prob = n()/nrow(roll_6_dice))
# could use isin function
rolldie(6) %>%
mutate(check = isin(., c(6,5,4,3,2,1), ordered = FALSE)) %>%
filter(check) %>%
summarise(prob = n()/nrow(roll_6_dice))
# could also use isin function
rolldie(6) %>%
mutate(check = isin(., c(6,5,4,3,2,1), ordered = FALSE)) %>%
filter(check) %>%
summarise(prob = n()/nrow(roll_6_dice))
cards(52, jokers = FALSE)
cards(jokers = FALSE)
cards(jokers = FALSE)
filter(suit %in% c("Spade","Club"))
cards(jokers = FALSE) %>%
filter(suit %in% c("Spade","Club"))
cards(jokers = FALSE) %>%
filter(suit %in% c("Spade","Club")) %>%
cards(jokers = FALSE) %>%
filter(suit %in% c("Spade","Club"))
cards(jokers = FALSE) %>%
mutate(black = suit %in% c("Spade","Club"))
filter(black)
cards(jokers = FALSE) %>%
mutate(black = suit %in% c("Spade","Club")) %>%
filter(black)
cards(jokers = FALSE) %>%
mutate(black = suit %in% c("Spade","Club")) %>%
filter(black) %>%
filter(suit = "Spade")
cards(jokers = FALSE) %>%
mutate(black = suit %in% c("Spade","Club")) %>%
filter(black) %>%
filter(suit == "Spade")
