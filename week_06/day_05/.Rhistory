transactions <- read_csv("data/online_retail_subset.csv") %>%
janitor::clean_names()
head(transactions, 20)
supportA <-transactions %>%
filter(stock_code == 22469) %>%
summarise(supportA = n()/nrow(transaction))
supportA <-transactions %>%
filter(stock_code == 22469) %>%
summarise(supportA = n()/nrow(transaction))
supportA <-transactions %>%
filter(stock_code == 22469) %>%
summarise(supportA = n())
supportA <-transactions %>%
filter(stock_code == 22469) %>%
summarise(supportA = n() / nrow(transactions))
transactionAB <-transactions %>%
filter(stock_code %in% c(22469,21110)
transactionAB <-transactions %>%
filter(stock_code %in% c(22469,21110))
transactions %>%
filter(stock_code %in% c(22469,21110))
library(arules)
install.packages("arules")
install.packages("arulesViz")
library(arules)
library(arulesViz)
transactions_reformat <- transactions %>%
select(InvoiceNo, Description) %>%
na.omit()
library(tidyverse)
transactions <- read_csv("data/online_retail_subset.csv") %>%
janitor::clean_names()
head(transactions, 20)
transactionAB <-transactions %>%
filter(stock_code %in% c(22469,21110))
for item A is P(A) = num trans with A/tot num trans
transactionAB <-transactions %>%
filter(stock_code %in% c(22469,21110))
transactionAB <-transactions %>%
filter(stock_code %in% c(22469,21110))
for item A is P(A) = num trans with A/tot num trans
#for item A is P(A) = num trans with A/tot num trans
supportA <-transactions %>%
filter(stock_code == 22469) %>%
summarise(supportA = n() / nrow(transactions))
supportB <-transactions %>%
filter(stock_code == 21110) %>%
summarise(supportB = n() / nrow(transactions))
transactions %>%
filter(stock_code == 21110)
transactionAB <-transactions %>%
filter(stock_code %in% c(22469,21110))
transactions %>%
select(invoice_no, stock_code, description)
filter(stock_code %in% c(22469,21110))
num_transactions <- transactions %>%
select(invoice_no) %>%
distinct(invoice_no)
num_invoices <- transactions %>%
select(invoice_no) %>%
distinct(invoice_no)
transactionAB <-transactions %>%
select(invoice_no, stock_code, description)
filter(stock_code %in% c(22469,21110))
num_invoices <- transactions %>%
select(invoice_no) %>%
distinct(invoice_no)
transactionAB <-transactions %>%
select(invoice_no, stock_code, description)
filter(stock_code %in% c(22469,21110))
library(tidyverse)
transactions <- read_csv("data/online_retail_subset.csv") %>%
janitor::clean_names()
head(transactions, 20)
skim(transactions)
num_invoices <- transactions %>%
select(invoice_no) %>%
distinct(invoice_no)
transactionAB <-transactions %>%
select(invoice_no, stock_code, description)
filter(stock_code %in% c(22469,21110))
transactionAB <-transactions %>%
select(invoice_no, stock_code, description) %>%
filter(stock_code %in% c(22469,21110))
#for item A is P(A) = num trans with A/tot num trans
supportA <-transactions %>%
filter(stock_code == 22469) %>%
summarise(supportA = n() / nrow(num_invoices))
supportB <-transactions %>%
filter(stock_code == 21110) %>%
summarise(supportB = n() / nrow(num_invoices))
#for item A is P(A) = num trans with A/tot num trans
supportA <-transactions %>%
filter(stock_code == 22469) %>%
summarise(supportA = n() / nrow(num_invoices))
supportB <-transactions %>%
filter(stock_code == 21110) %>%
summarise(supportB = n() / nrow(num_invoices))
supportA <-transactions %>%
filter(stock_code %in% c(22469,21110)) %>%
summarise(count = n())
a_list <-transactions %>%
select(stock_code, invoice_no, description) %>%
(filter(stock_code == 22469)
a_list <-transactions %>%
a_list <-transactions %>%
select(stock_code, invoice_no, description) %>%
(filter(stock_code == 22469))
a_list <-transactions %>%
select(stock_code, invoice_no, description) %>%
filter(stock_code == 22469)
#for item A is P(A) = num trans with A/tot num trans
a_list <-transactions %>%
select(stock_code, invoice_no, description) %>%
rename(description = item_a) %>%
filter(stock_code == 22469)
a_list
#for item A is P(A) = num trans with A/tot num trans
a_list <-transactions %>%
select(invoice_no, description) %>%
rename(description = item_a) %>%
filter(stock_code == 22469)
#for item A is P(A) = num trans with A/tot num trans
a_list <-transactions %>%
select(invoice_no, description) %>%
rename(item_a = description) %>%
filter(stock_code == 22469)
#for item A is P(A) = num trans with A/tot num trans
a_list <-transactions %>%
select(invoice_no, description) %>%
rename(item_a = description) %>%
filter(stock_code == 22469)
#for item A is P(A) = num trans with A/tot num trans
a_list <-transactions %>%
filter(stock_code == 22469)
select(invoice_no, description) %>%
rename(item_a = description) %>%
b_list <-transactions %>%
filter(stock_code == 21110)
#for item A is P(A) = num trans with A/tot num trans
a_list <-transactions %>%
filter(stock_code == 22469) %>%
select(invoice_no, description) %>%
rename(item_a = description)
b_list <-transactions %>%
filter(stock_code == 21110) %>%
select(invoice_no, description) %>%
rename(item_b = description)
#for item A is P(A) = num trans with A/tot num trans
a_list <-transactions %>%
filter(stock_code == 22469) %>%
select(invoice_no, description) %>%
rename(item_a = description)
b_list <-transactions %>%
filter(stock_code == 21110) %>%
select(invoice_no, description) %>%
rename(item_b = description)
intersect(a_list$invoice_no,b_list$invoice_no)
union_all(a_list$invoice_no,b_list$invoice_no)
set_diff(a_list$invoice_no,b_list$invoice_no)
setdiff(a_list$invoice_no,b_list$invoice_no)
intersect(a_list$invoice_no,b_list$invoice_no)
length(intersect(a_list$invoice_no,b_list$invoice_no))
sup_a <- nrow(a_list)/nrow(num_invoices)
sup_b <- nrow(b_list)/nrow(num_invoices)
sup_ab <- length(intersect(a_list$invoice_no,b_list$invoice_no))/nrow(num_invoices)
sup_a <- nrow(a_list)/nrow(num_invoices)
sup_b <- nrow(b_list)/nrow(num_invoices)
sup_ab <- length(intersect(a_list$invoice_no,b_list$invoice_no))/nrow(num_invoices)
conf_ab <- length(intersect(a_list$invoice_no,b_list$invoice_no))/nrow(a_list)
sup_a <- nrow(a_list)/nrow(num_invoices)
sup_b <- nrow(b_list)/nrow(num_invoices)
sup_ab <- length(intersect(a_list$invoice_no,b_list$invoice_no))/nrow(num_invoices)
conf_ab <- sup_ab/sup_a
lift_ab <- sup_ab/sup_a*sup*b
sup_ab <- length(intersect(a_list$invoice_no,b_list$invoice_no))/nrow(num_invoices)
conf_ab <- sup_ab/sup_a
lift_ab <- sup_ab/sup_a*sup_b
library(arules)
library(arulesViz)
transactions_reformat <- transactions %>%
select(InvoiceNo, Description) %>%
na.omit()
transactions <- read_csv("data/online_retail_subset.csv") %>%
transactions_reformat <- transactions %>%
select(InvoiceNo, Description) %>%
na.omit()
transactions_reformat <- transactions %>%
select(invoice_no, description) %>%
na.omit()
write_csv(transactions_reformat, "transactions_reformat.csv")
apriori_format <- read.transactions("transactions_reformat.csv", format = "single", sep = ",", header = TRUE, cols = c("InvoiceNo", "Description"))
write_csv(transactions_reformat, "transactions_reformat.csv")
apriori_format <- read.transactions("transactions_reformat.csv", format = "single", sep = ",", header = TRUE, cols = c("InvoiceNo", "Description"))
transactions_reformat <- transactions %>%
select(invoice_no, description) %>%
rename(InvoiceNo = invoice_no, Description = description)
na.omit()
transactions_reformat <- transactions %>%
select(invoice_no, description) %>%
rename(InvoiceNo = invoice_no, Description = description) %>%
na.omit()
write_csv(transactions_reformat, "transactions_reformat.csv")
apriori_format <- read.transactions("transactions_reformat.csv", format = "single", sep = ",", header = TRUE, cols = c("InvoiceNo", "Description"))
write_csv(transactions_reformat, "transactions_reformat.csv")
apriori_format <- read.transactions("transactions_reformat.csv", format = "single", sep = ",", header = TRUE, cols = c("InvoiceNo", "Description"))
write_csv(transactions_reformat, "transactions_reformat.csv")
apriori_format <- read.transactions("transactions_reformat.csv", format = "single", sep = ",", header = TRUE, cols = c("InvoiceNo", "Description"))
inspect(head(apriori_format))
itemFrequencyPlot(transactions_reformat, topN=20, type="absolute")
library(arules)
library(arulesViz)
itemFrequencyPlot(transactions_reformat, topN=20, type="absolute")
itemFrequencyPlot(transactions_reformat,topN=20)
itemFrequencyPlot(apriori_format,topN=20, type="absolute")
itemFrequencyPlot(apriori_format,topN=20)
itemFrequencyPlot(apriori_format,topN=20, type=absolute)
itemFrequencyPlot(apriori_format,topN=20, type="absolute")
rules <- apriori(shopping,parameter = list(sup=0.01, conf=0.8))
rules <- apriori(shopping,parameter = list(supp=0.01, conf=0.8))
write_csv(transactions_reformat, "transactions_reformat.csv")
shopping <- read.transactions("transactions_reformat.csv", format = "single", sep = ",", header = TRUE, cols = c("InvoiceNo", "Description"))
itemFrequencyPlot(shopping,topN=20, type="absolute")
rules <- apriori(shopping,parameter = list(supp=0.01, conf=0.8))
rules <- apriori(shopping,parameter = list(supp=0.001, conf=0.8))
rules <- apriori(shopping,parameter = list(supp=1, conf=0.8))
rules <- apriori(shopping,parameter = list(supp=0.5, conf=0.8))
rules <- apriori(shopping,parameter = list(supp=0.01, conf=0.8))
rules <- apriori(shopping,parameter = list(supp=0.005, conf=0.8))
rules <- apriori(shopping,parameter = list(supp=0.01, conf=0.2))
rules <- apriori(shopping,parameter = list(supp=0.01, conf=0.8))
options(digits=2)
inspect(rules[1:5])
options(digits=2)
inspect(rules[1:10])
options(digits=2)
inspect(rules[1:100])
rules <- sort(rules, by="confidence", decreasing = TRUE)
options(digits=2)
inspect(rules[1:100])
plot(rules,method="graph",interactive=TRUE,shading=NA)
plot(rules,method="graph",interactive=TRUE)
plot(rules,method="graph",interactive=TRUE,shading = NULL)
plot(rules,method="graph",interactive=TRUE)
tkplot(g)
tkplot(g)
plot(rules,method="graph",interactive=TRUE)
library(tidyverse)
library(skimr)
library(infer)
sleep_data <- (msleep)
glimpse(sleep_data)
skim(sleep_data)
sleep_data %>%
ggplot() +
aes(x=sleep_total, y = vore) +
geom_boxplot()
sleep_data %>%
ggplot() +
aes(x=sleep_total, y = order) +
geom_boxplot()
sleep_data %>%
ggplot() +
aes(x=sleep_total) +
geom_boxplot()
sleep_stats <- sleep_data %>%
summarise(min = min(sleep_total),
q1 = quantile(sleep_total,0.25),
mean = mean(sleep_total),
q3 = quantile(sleep_total,0.75),
max = max(sleep_total))
null_distribution <- sleep_data %>%
specify(response = sleep_total) %>%  #we want to test this variable
hypothesize(null = "point", mu = 7) %>%  #null hypothesis is that mean = 7
generate(reps = 10000, type = "bootstrap") %>%  # what method will use to generate null hypotheses
calculate(stat = "mean") #statistic of interest
null_distribution %>%
visualise(bins = 20) +
shade_p_value(obs_stat = sleep_stats$mean, direction = "both")
p_value <- null_distribution %>%
get_p_value(obs_stat = sleep_stats$mean, direction = "both") %>%
pull()
p_value
results <- tibble()
for (sample_num in 1:10000){
# sample with replacement from sleep_total
this_result <- sleep_data %>%
rep_sample_n(size = nrow(sleep_data), replace = TRUE) %>%
ungroup() %>%
select(sleep_total) %>%
summarise(mean = mean(sleep_total))
# add this_result to growing tibble of results
results <- results %>%
bind_rows(this_result)
}
results %>%
mutate(mean = mean - (mean(mean) - 7)) %>%
ggplot() +
aes(x=mean) +
geom_histogram(bins=20)
this_bootstrap <- sleep_data %>%
specify(response = sleep_total) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean") %>%
mutate(stat = stat - (mean(stat) - 7))
this_bootstrap %>%
ggplot() +
aes(x=stat) +
geom_histogram(bins=20)
results <- tibble()
for (sample_num in 1:10000){
# sample with replacement from sleep_total
this_result <- sleep_data %>%
rep_sample_n(size = nrow(sleep_data), replace = TRUE) %>%
ungroup() %>%
select(sleep_total) %>%
summarise(mean = mean(sleep_total))
# add this_result to growing tibble of results
results <- results %>%
bind_rows(this_result)
}
results %>%
mutate(mean = mean - (mean(mean) - 7)) %>%
ggplot() +
aes(x=mean) +
geom_histogram(bins=20)
this_bootstrap <- sleep_data %>%
specify(response = sleep_total) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean") %>%
mutate(stat = stat - (mean(stat) - 7))
this_bootstrap <- sleep_data %>%
specify(response = sleep_total) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean") %>%
mutate(stat = stat - (mean(stat) - 7))
this_bootstrap %>%
ggplot() +
aes(x=stat) +
geom_histogram(bins=20)
sleep_data %>%
filter(vore %in% c("herbi","omni")) %>%
ggplot() +
aes(y = sleep_total, x = vore) +
geom_boxplot()
vore_data <- sleep_data %>%
filter(vore %in% c("herbi","omni"))
vore_stats <- sleep_data %>%
filter(vore %in% c("herbi","omni")) %>%
group_by(vore) %>%
summarise(median = median(sleep_total))
vore_stats_diff=diff(vore_stats$median)
vore_data <- sleep_data %>%
filter(vore %in% c("herbi","omni"))
vore_stats <- sleep_data %>%
filter(vore %in% c("herbi","omni")) %>%
group_by(vore) %>%
summarise(median = median(sleep_total))
vore_stats_diff=diff(vore_stats$median)
sleep_data %>%
filter(vore %in% c("herbi","omni")) %>%
group_by(vore) %>%
summarise(median = median(sleep_total)
sleep_data %>%
sleep_data %>%
filter(vore %in% c("herbi","omni")) %>%
group_by(vore) %>%
summarise(median = median(sleep_total))
vore_data <- sleep_data %>%
filter(vore %in% c("herbi","omni"))
vore_stats <- sleep_data %>%
filter(vore %in% c("herbi","omni")) %>%
group_by(vore) %>%
summarise(mean = mean(sleep_total))
vore_stats_diff=diff(vore_stats$median)
vore_data <- sleep_data %>%
filter(vore %in% c("herbi","omni"))
vore_stats <- sleep_data %>%
filter(vore %in% c("herbi","omni")) %>%
group_by(vore) %>%
summarise(mean = mean(sleep_total))
vore_stats_diff=diff(vore_stats$mean)
sleep_data %>%
filter(vore %in% c("herbi","omni")) %>%
group_by(vore) %>%
summarise(mean = mean(sleep_total))
null_distribution <- vore_data %>%
specify(response = sleep_total, explanatory = vore) %>%
hypothesise(null = "independence") %>%  #H0 there is no dependance
generate(reps = 10000, type = "permute") %>% #permute to shuffle labels
calculate(stat = "diff in means",
order = c("omni","herbi")) #omni - herbi
null_distribution %>%
visualise() +
shade_p_value(obs_stat = vore_stats_diff,
direction = "greater")
p_value <- null_distribution %>%
get_p_value(obs_stat = vore_stats_diff,
direction = "greater") %>%
pull()
sleep_data %>%
ggplot() +
aes(y = conservation) +
geom_bar()
null_distribution <- dom_data %>%
specify(response = is_dom_animal, success = "TRUE") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 10000, type = "draw") %>%
calculate(stat = "prop")
dom_data <- sleep_data %>%
#replace NA with unknown so we can analyse these rows
mutate(conservation = coalesce(conservation, "unknown")) %>%
mutate(is_dom_animal =
if_else(conservation == "domesticated",TRUE,FALSE)) %>%
select(is_dom_animal)
dom_stat <- dom_data %>%
filter(is_dom_animal) %>%
summarise(prop_dom_animal =sum(is_dom_animal)/nrow(dom_data))
null_distribution <- dom_data %>%
specify(response = is_dom_animal, success = "TRUE") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 10000, type = "draw") %>%
calculate(stat = "prop")
null_distribution %>%
visualise() +
shade_p_value(obs_stat = dom_stat,
direction = "greater")
null_distribution %>%
get_p_value(obs_stat = dom_stat,
direction = "greater")
null_distribution <- dom_data %>%
specify(response = is_dom_animal, success = "TRUE") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 10000, type = "draw") %>%
calculate(stat = "prop")
null_distribution %>%
visualise() +
shade_p_value(obs_stat = dom_stat,
direction = "greater")
null_distribution %>%
get_p_value(obs_stat = dom_stat,
direction = "greater")
library(tidyverse)
transactions <- read_csv("data/online_retail_subset.csv") %>%
janitor::clean_names()
head(transactions, 20)
skim(transactions)
num_invoices <- transactions %>%
select(invoice_no) %>%
distinct(invoice_no)
transactionAB <-transactions %>%
select(invoice_no, stock_code, description) %>%
filter(stock_code %in% c(22469,21110))
#for item A is P(A) = num trans with A/tot num trans
a_list <-transactions %>%
filter(stock_code == 22469) %>%
select(invoice_no, description) %>%
rename(item_a = description)
b_list <-transactions %>%
filter(stock_code == 21110) %>%
select(invoice_no, description) %>%
rename(item_b = description)
#Q2.1
sup_a <- nrow(a_list)/nrow(num_invoices)
sup_b <- nrow(b_list)/nrow(num_invoices)
#Q2.2
sup_ab <- length(intersect(a_list$invoice_no,b_list$invoice_no))/nrow(num_invoices)
conf_ab <- sup_ab/sup_a
#Q2.3
lift_ab <- sup_ab/sup_a*sup_b
#this value is < 1 so items A abd B are unlikely to be bought together
library(arules)
library(arulesViz)
transactions_reformat <- transactions %>%
select(invoice_no, description) %>%
rename(InvoiceNo = invoice_no, Description = description) %>%
na.omit()
write_csv(transactions_reformat, "transactions_reformat.csv")
shopping <- read.transactions("transactions_reformat.csv", format = "single", sep = ",", header = TRUE, cols = c("InvoiceNo", "Description"))
itemFrequencyPlot(shopping,topN=20, type="absolute")
rules <- apriori(shopping,parameter = list(supp=0.02, conf=0.8))
options(digits=2)
inspect(rules[1:5])
rules <- sort(rules, by="confidence", decreasing = TRUE)
plot(rules,method="graph",interactive=TRUE)
plot(rules,method="graph",interactive=TRUE)
plot(rules,method="graph",interactive=TRUE)
plot(rules,method="graph",interactive=TRUE)
plot(rules,method="graph",interactive=TRUE)
options(digits=2)
inspect(rules[1:10])
options(digits=2)
inspect(rules[1:10])
rules <- apriori(shopping,parameter = list(supp=0.01, conf=0.8))
options(digits=2)
inspect(rules[1:10])
rules <- sort(rules, by="confidence", decreasing = TRUE)
plot(rules,method="graph",interactive=TRUE)
options(digits=2)
inspect(rules[1:5])
rules <- apriori(shopping,parameter = list(supp=0.02, conf=0.8))
rules <- apriori(shopping,parameter = list(supp=0.02, conf=0.9))
options(digits=2)
inspect(rules[1:5])
rules <- apriori(shopping,parameter = list(supp=0.02, conf=0.75))
options(digits=2)
inspect(rules[1:5])
rules <- apriori(shopping,parameter = list(supp=0.02, conf=0.8))
options(digits=2)
inspect(rules[1:5])
rules <- sort(rules, by="confidence", decreasing = TRUE)
plot(rules,method="graph",interactive=TRUE)
