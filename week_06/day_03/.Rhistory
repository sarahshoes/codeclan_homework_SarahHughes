geom_line()
geom_errorbar(aes(ymin=results_ci_lower,ymax=results_ymin_upper)
analysis %>%
#visualise effect or sampling
ggplot() +
aes(x=samples, y=results_prop) +
geom_line()
geom_errorbar(aes(ymin=results_ci_lower,ymax=results_ci_upper))
analysis %>%
#visualise effect or sampling
ggplot() +
aes(x=samples, y=results_prop) +
geom_line() +
geom_errorbar(aes(ymin=results_ci_lower,ymax=results_ci_upper))
analysis %>%
#visualise effect or sampling
ggplot() +
aes(x=samples, y=results_prop) +
geom_point() +
geom_errorbar(aes(ymin=results_ci_lower,ymax=results_ci_upper))
analysis %>%
#visualise effect or sampling
ggplot() +
aes(x=samples, y=results_prop) +
geom_line()
analysis %>%
#visualise effect or sampling
ggplot() +
aes(x=samples, y=results_prop) +
geom_point() +
geom_errorbar(aes(ymin=results_ci_lower,ymax=results_ci_upper))
analysis %>%
#visualise effect or sampling
ggplot() +
aes(x=samples, y=results_prop) +
geom_line()
library(tidyverse)
library(infer)
library(janitor)
library(e1071) #for skewness
library(plotrix)
houses <- read.csv("data/ames.csv") %>%
clean_names()
library(ggpubr)
ggdensity(houses$sale_price,
main = "Density plot of sales_price",
xlab = "sales price")
ggqqplot(houses$sale_price)
sw_test <- shapiro.test(houses$sale_price)
sw_test
#is p value >0.05?
sw_test$p.value >0.05
#false ! so the p value is less than 0.05 suggesting that the data are significantly different from a normal distribution.
qqnorm(houses$sale_price)
qqline(houses$sale_price)
houses %>%
select(lot_area) %>%
summarise(skewness = skewness(lot_area, type = 1))
library(ggpubr)
ggdensity(houses$lot_area,
main = "Density plot of lot area",
xlab = "lot area")
ggqqplot(houses$lot_area)
sw_test <- shapiro.test(houses$lot_area)
sw_test
#is p value >0.05?
sw_test$p.value >0.05
#no. so the p value is less than 0.05 suggesting that the data are significantly different from a normal distribution.
qqnorm(houses$lot_area)
qqline(houses$lot_area)
houses %>%
ggplot()+
aes(x = lot_area) +
geom_histogram(bins=100)
area_stats <- houses %>%
summarise(min = min(lot_area),
mean = mean(lot_area),
max = max(lot_area),
sd = sd(lot_area),
IQR = as.numeric(quantile(lot_area,0.75)-quantile(lot_area,0.25))
)
sample_200 <- houses %>%
select(lot_area) %>%
rep_sample_n(size = 200, reps = 1000)
sample_200 %>%
ggplot() +
aes(x = lot_area) +
geom_histogram()
summary_sample_200 <- sample_200 %>%
summarise(
mean_lot_area = mean(lot_area))
summary_sample_200 %>%
ggplot() +
aes(x =  mean_lot_area) +
geom_histogram()
houses %>%
select(lot_area) %>%
rep_sample_n(size = nrow(houses), replace = TRUE, reps = 1000) %>%
ungroup() %>%
filter(replicate < 10) %>%
ggplot((aes(x = lot_area))) +
geom_histogram(bins=100) +
facet_wrap(~replicate)
bootstrap_resample <- houses %>%
select(lot_area) %>%
rep_sample_n(size = nrow(houses), replace = TRUE, reps = 5000) %>%
#ungroup() %>%
summarise(mean_lot_area_boot = mean(lot_area)
)
bootstrap_resample %>%
ggplot +
aes(x=mean_lot_area_boot)+
geom_histogram()
ci_95 <- bootstrap_resample %>%
summarise(mean = mean(mean_lot_area_boot),
lower_bound = quantile(mean_lot_area_boot, probs = 0.025),
upper_bound = quantile(mean_lot_area_boot, probs = 0.975)
)
bootstrap_resample %>%
ggplot +
aes(x=mean_lot_area_boot)+
geom_histogram(bins=30) +
geom_vline(xintercept = ci_95$mean, col = "blue") +
geom_vline(xintercept = ci_95$lower_bound, col = "red") +
geom_vline(xintercept = ci_95$upper_bound, col = "red")
# specify that we want to look at lot_area variable, 5000 reps, and want to calculate the mean
infer_resample <- houses %>%
specify(response = lot_area) %>%
generate(reps = 5000, type = "bootstrap") %>%
calculate(stat = "mean")
infer_ci_95 <- infer_resample %>%
get_confidence_interval(level = 0.95, type = "percentile")
infer_ci_95
infer_resample %>%
visualise(bins=30) +
shade_confidence_interval(endpoints = infer_ci_95)
infer_ci_99 <- infer_resample %>%
get_confidence_interval(level = 0.99, type = "percentile")
infer_ci_99
infer_ci_95$upper_ci - infer_ci_95$lower_ci
infer_ci_99$upper_ci - infer_ci_99$lower_ci
mean_infer <- infer_resample %>%
summarise(mean = mean(stat))
mean_infer
houses <- houses %>%
mutate(pre_1920 = ifelse(year_built<1920,"yes","no"))
houses %>%
ggplot(aes(x=pre_1920)) +
geom_bar()
houses %>%
summarise(prop_pre_1920 = sum(pre_1920)/n())
library(tidyverse)
library(infer)
library(janitor)
library(e1071) #for skewness
library(plotrix) #plots confidence intervals
library(tictoc)
samples = c(200,400,600,800,1000,
2000,3000,4000,5000,6000,7000,8000,9000,
10000,15000,20000,25000,30000,40000,50000)
results=rep(0,length(samples))
analysis=tibble(samples,
results_prop=results,
results_ci_upper=results,
results_ci_lower=results,
analysis_time)
samples = c(200,400,600,800,1000,
2000,3000,4000,5000,6000,7000,8000,9000,
10000,15000,20000,25000,30000,40000,50000)
results=rep(0,length(samples))
analysis=tibble(samples,
results_prop=results,
results_ci_upper=results,
results_ci_lower=results,
analysis_time=results)
for (isamp in 1:length(analysis$samples)){
tic("loop")
# specify that we want to look at lot_area variable,
# start with 200 reps
infer_resample <- houses %>%
specify(response = pre_1920, success = "yes") %>%
generate(reps = analysis$samples[isamp], type = "bootstrap") %>%
calculate(stat = "prop")
# calc ci 95
infer_ci_95 <- infer_resample %>%
get_confidence_interval(level = 0.95, type = "percentile")
analysis$results_ci_upper[isamp] <- infer_ci_95 %>%
select(upper_ci) %>%
pull()
analysis$results_ci_lower[isamp] <- infer_ci_95 %>%
select(lower_ci) %>%
pull()
#visualise
infer_resample %>%
visualise(bins=30) +
shade_confidence_interval(endpoints = infer_ci_95)
#capture estimate
prop_infer <- infer_resample %>%
summarise(mean = mean(stat))
analysis$results_prop[isamp] <- prop_infer %>%
pull()
analysis$time[isamp] <- toc()
}
library(tidyverse)
library(infer)
library(janitor)
library(e1071) #for skewness
library(plotrix) #plots confidence intervals but can use ggplot
library(tictoc) #for timing a computation
install.packages("tictoc")
library(tidyverse)
library(infer)
library(janitor)
library(e1071) #for skewness
library(plotrix) #plots confidence intervals but can use ggplot
library(tictoc) #for timing a computation
for (isamp in 1:length(analysis$samples)){
tic("loop")
# specify that we want to look at lot_area variable,
# start with 200 reps
infer_resample <- houses %>%
specify(response = pre_1920, success = "yes") %>%
generate(reps = analysis$samples[isamp], type = "bootstrap") %>%
calculate(stat = "prop")
# calc ci 95
infer_ci_95 <- infer_resample %>%
get_confidence_interval(level = 0.95, type = "percentile")
analysis$results_ci_upper[isamp] <- infer_ci_95 %>%
select(upper_ci) %>%
pull()
analysis$results_ci_lower[isamp] <- infer_ci_95 %>%
select(lower_ci) %>%
pull()
#visualise
infer_resample %>%
visualise(bins=30) +
shade_confidence_interval(endpoints = infer_ci_95)
#capture estimate
prop_infer <- infer_resample %>%
summarise(mean = mean(stat))
analysis$results_prop[isamp] <- prop_infer %>%
pull()
analysis$time[isamp] <- toc()
}
library(tidyverse)
library(infer)
library(janitor)
library(e1071) #for skewness
library(plotrix) #plots confidence intervals but can use ggplot
library(tictoc) #for timing a computation
houses <- read.csv("data/ames.csv") %>%
clean_names()
library(ggpubr)
ggdensity(houses$sale_price,
main = "Density plot of sales_price",
xlab = "sales price")
ggqqplot(houses$sale_price)
sw_test <- shapiro.test(houses$sale_price)
sw_test
#is p value >0.05?
sw_test$p.value >0.05
#false ! so the p value is less than 0.05 suggesting that the data are significantly different from a normal distribution.
qqnorm(houses$sale_price)
qqline(houses$sale_price)
houses %>%
select(lot_area) %>%
summarise(skewness = skewness(lot_area, type = 1))
library(ggpubr)
ggdensity(houses$lot_area,
main = "Density plot of lot area",
xlab = "lot area")
ggqqplot(houses$lot_area)
sw_test <- shapiro.test(houses$lot_area)
sw_test
#is p value >0.05?
sw_test$p.value >0.05
#no. so the p value is less than 0.05 suggesting that the data are significantly different from a normal distribution.
qqnorm(houses$lot_area)
qqline(houses$lot_area)
houses %>%
ggplot()+
aes(x = lot_area) +
geom_histogram(bins=100)
area_stats <- houses %>%
summarise(min = min(lot_area),
mean = mean(lot_area),
max = max(lot_area),
sd = sd(lot_area),
IQR = as.numeric(quantile(lot_area,0.75)-quantile(lot_area,0.25))
)
sample_200 <- houses %>%
select(lot_area) %>%
rep_sample_n(size = 200, reps = 1000)
sample_200 %>%
ggplot() +
aes(x = lot_area) +
geom_histogram()
summary_sample_200 <- sample_200 %>%
summarise(
mean_lot_area = mean(lot_area))
summary_sample_200 %>%
ggplot() +
aes(x =  mean_lot_area) +
geom_histogram()
houses %>%
select(lot_area) %>%
rep_sample_n(size = nrow(houses), replace = TRUE, reps = 1000) %>%
ungroup() %>%
filter(replicate < 10) %>%
ggplot((aes(x = lot_area))) +
geom_histogram(bins=100) +
facet_wrap(~replicate)
bootstrap_resample <- houses %>%
select(lot_area) %>%
rep_sample_n(size = nrow(houses), replace = TRUE, reps = 5000) %>%
#ungroup() %>%
summarise(mean_lot_area_boot = mean(lot_area)
)
bootstrap_resample %>%
ggplot +
aes(x=mean_lot_area_boot)+
geom_histogram()
ci_95 <- bootstrap_resample %>%
summarise(mean = mean(mean_lot_area_boot),
lower_bound = quantile(mean_lot_area_boot, probs = 0.025),
upper_bound = quantile(mean_lot_area_boot, probs = 0.975)
)
bootstrap_resample %>%
ggplot +
aes(x=mean_lot_area_boot)+
geom_histogram(bins=30) +
geom_vline(xintercept = ci_95$mean, col = "blue") +
geom_vline(xintercept = ci_95$lower_bound, col = "red") +
geom_vline(xintercept = ci_95$upper_bound, col = "red")
# specify that we want to look at lot_area variable, 5000 reps, and want to calculate the mean
infer_resample <- houses %>%
specify(response = lot_area) %>%
generate(reps = 5000, type = "bootstrap") %>%
calculate(stat = "mean")
infer_ci_95 <- infer_resample %>%
get_confidence_interval(level = 0.95, type = "percentile")
infer_ci_95
infer_resample %>%
visualise(bins=30) +
shade_confidence_interval(endpoints = infer_ci_95)
infer_ci_99 <- infer_resample %>%
get_confidence_interval(level = 0.99, type = "percentile")
infer_ci_99
infer_ci_95$upper_ci - infer_ci_95$lower_ci
infer_ci_99$upper_ci - infer_ci_99$lower_ci
mean_infer <- infer_resample %>%
summarise(mean = mean(stat))
mean_infer
houses <- houses %>%
mutate(pre_1920 = ifelse(year_built<1920,"yes","no"))
houses %>%
ggplot(aes(x=pre_1920)) +
geom_bar()
houses %>%
summarise(prop_pre_1920 = sum(pre_1920)/n())
for (isamp in 1:length(analysis$samples)){
tic("loop")
# specify that we want to look at lot_area variable,
# start with 200 reps
infer_resample <- houses %>%
specify(response = pre_1920, success = "yes") %>%
generate(reps = analysis$samples[isamp], type = "bootstrap") %>%
calculate(stat = "prop")
# calc ci 95
infer_ci_95 <- infer_resample %>%
get_confidence_interval(level = 0.95, type = "percentile")
analysis$results_ci_upper[isamp] <- infer_ci_95 %>%
select(upper_ci) %>%
pull()
analysis$results_ci_lower[isamp] <- infer_ci_95 %>%
select(lower_ci) %>%
pull()
#visualise
infer_resample %>%
visualise(bins=30) +
shade_confidence_interval(endpoints = infer_ci_95)
#capture estimate
prop_infer <- infer_resample %>%
summarise(mean = mean(stat))
analysis$results_prop[isamp] <- prop_infer %>%
pull()
analysis$time[isamp] <- toc()
}
analysis$time
for (isamp in 1:length(analysis$samples)){
tic("loop")
# specify that we want to look at lot_area variable,
# start with 200 reps
infer_resample <- houses %>%
specify(response = pre_1920, success = "yes") %>%
generate(reps = analysis$samples[isamp], type = "bootstrap") %>%
calculate(stat = "prop")
# calc ci 95
infer_ci_95 <- infer_resample %>%
get_confidence_interval(level = 0.95, type = "percentile")
analysis$results_ci_upper[isamp] <- infer_ci_95 %>%
select(upper_ci) %>%
pull()
analysis$results_ci_lower[isamp] <- infer_ci_95 %>%
select(lower_ci) %>%
pull()
#visualise
infer_resample %>%
visualise(bins=30) +
shade_confidence_interval(endpoints = infer_ci_95)
#capture estimate
prop_infer <- infer_resample %>%
summarise(mean = mean(stat))
analysis$results_prop[isamp] <- prop_infer %>%
pull()
analysis$time[isamp] <- toc() %>%
pull()
}
for (isamp in 1:length(analysis$samples)){
tic("loop")
# specify that we want to look at lot_area variable,
# start with 200 reps
infer_resample <- houses %>%
specify(response = pre_1920, success = "yes") %>%
generate(reps = analysis$samples[isamp], type = "bootstrap") %>%
calculate(stat = "prop")
# calc ci 95
infer_ci_95 <- infer_resample %>%
get_confidence_interval(level = 0.95, type = "percentile")
analysis$results_ci_upper[isamp] <- infer_ci_95 %>%
select(upper_ci) %>%
pull()
analysis$results_ci_lower[isamp] <- infer_ci_95 %>%
select(lower_ci) %>%
pull()
#visualise
infer_resample %>%
visualise(bins=30) +
shade_confidence_interval(endpoints = infer_ci_95)
#capture estimate
prop_infer <- infer_resample %>%
summarise(mean = mean(stat))
analysis$results_prop[isamp] <- prop_infer %>%
pull()
analysis$time[isamp] <- toc() %>%
pull()
}
samples = c(200,400,600,800,1000,
2000,3000,4000,5000,6000,7000,8000,9000,
10000,15000,20000,25000,30000,40000,50000)
results=rep(0,length(samples))
analysis=tibble(samples,
results_prop=results,
results_ci_upper=results,
results_ci_lower=results,
analysis_time=results)
for (isamp in 1:length(analysis$samples)){
tic("loop")
# specify that we want to look at lot_area variable,
# start with 200 reps
infer_resample <- houses %>%
specify(response = pre_1920, success = "yes") %>%
generate(reps = analysis$samples[isamp], type = "bootstrap") %>%
calculate(stat = "prop")
# calc ci 95
infer_ci_95 <- infer_resample %>%
get_confidence_interval(level = 0.95, type = "percentile")
analysis$results_ci_upper[isamp] <- infer_ci_95 %>%
select(upper_ci) %>%
pull()
analysis$results_ci_lower[isamp] <- infer_ci_95 %>%
select(lower_ci) %>%
pull()
#visualise
infer_resample %>%
visualise(bins=30) +
shade_confidence_interval(endpoints = infer_ci_95)
#capture estimate
prop_infer <- infer_resample %>%
summarise(mean = mean(stat))
analysis$results_prop[isamp] <- prop_infer %>%
pull()
analysis$time[isamp] <- toc() %>%
}
for (isamp in 1:length(analysis$samples)){
tic("loop")
# specify that we want to look at lot_area variable,
# start with 200 reps
infer_resample <- houses %>%
specify(response = pre_1920, success = "yes") %>%
generate(reps = analysis$samples[isamp], type = "bootstrap") %>%
calculate(stat = "prop")
# calc ci 95
infer_ci_95 <- infer_resample %>%
get_confidence_interval(level = 0.95, type = "percentile")
analysis$results_ci_upper[isamp] <- infer_ci_95 %>%
select(upper_ci) %>%
pull()
analysis$results_ci_lower[isamp] <- infer_ci_95 %>%
select(lower_ci) %>%
pull()
#visualise
infer_resample %>%
visualise(bins=30) +
shade_confidence_interval(endpoints = infer_ci_95)
#capture estimate
prop_infer <- infer_resample %>%
summarise(mean = mean(stat))
analysis$results_prop[isamp] <- prop_infer %>%
pull()
toc()
}
