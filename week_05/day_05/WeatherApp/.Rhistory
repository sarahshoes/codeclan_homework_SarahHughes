summarise(across(where(is.numeric),
~{max(.x, na.rm = TRUE)}))
max_data <- data %>%
filter(location == input$location) %>%
filter(yyyy >= input$st_year & yyyy < input$end_year) %>%
group_by (mm) %>%
select(-yyyy) %>%
summarise(across(where(is.numeric),
~{max(.x)}))
max_data <- data %>%
filter(location == input$location) %>%
filter(yyyy >= input$st_year & yyyy < input$end_year) %>%
group_by (mm) %>%
select(-yyyy) %>%
summarise(across(where(is.numeric),
~{max(.x)}))
max_data <- data %>%
filter(location == input$location) %>%
filter(yyyy >= input$st_year & yyyy < input$end_year) %>%
group_by (mm) %>%
select(-yyyy) %>%
summarise(across(where(is.numeric),
~{max(.x)}))
min_data <- data %>%
filter(location == input$location) %>%
filter(yyyy >= input$st_year & yyyy < input$end_year) %>%
group_by (mm) %>%
select(-yyyy) %>%
summarise(across(where(is.numeric),
~{min(.x, na.rm = TRUE)}))
max_data <- data %>%
filter(location == input$location) %>%
filter(yyyy >= input$st_year & yyyy < input$end_year) %>%
group_by (mm) %>%
select(-yyyy) %>%
summarise(across(where(is.numeric),
~{max(.x, na.rm = TRUE)}))
min_data <- data %>%
filter(location == input$location) %>%
filter(yyyy >= input$st_year & yyyy < input$end_year) %>%
group_by (mm) %>%
select(-yyyy) %>%
summarise(across(where(is.numeric),
~{min(.x, na.rm = TRUE)}))
met_data = pivot_longer(data, c(tmax,tmin,af,rain,sun),
names_to = "param",
values_to = "data")
met_avg = pivot_longer(avg_data, c(tmax,tmin,af,rain,sun),
names_to = "param",
values_to = "mnth_avg_data")
met_max = pivot_longer(max_data, c(tmax,tmin,af,rain,sun),
names_to = "param",
values_to = "mnth_max_data")
avg_merge = merge(met_avg,met_max)
avg_merge = merge(avg_merge,met_min)
library(tidyverse)
library(janitor)
library(colorfindr)
library(lubridate)
strip_strings <- function(old_column, strings){
cleaned <- old_column
# order strings longest first so "string within string" is not a problem
order <- sort(nchar(strings), decreasing=TRUE, index.return=TRUE)
strings <- strings[order$ix]
for (badstring in strings){
cleaned <- str_remove(cleaned,str_c(" ",badstring))
#adding this doesnt allow for a string to be 'embedded'
cleaned <- str_trim(cleaned)
}
return(cleaned)
}
extract_header <- function(filename){
#filename <-  "lerwickdata.txt"
header_txt <- read_lines(here::here("raw_data",filename),n_max = 7)
location_txt <- header_txt[1]
position_lat <- str_extract(header_txt[2], "Lat\\s.{6}") #identify lat string
position_lat <- as.numeric(str_remove(position_lat,"Lat ")) #strip lat string
position_lon <- str_extract(header_txt[2], "Lon\\s.{6}") #identify lon string
position_lon <- as.numeric(str_remove(position_lon,"Lon ")) #strip lon string
col_txt <- str_split(header_txt[6], pattern = "\\s{1,}", simplify = TRUE)
col_txt <- col_txt[2:8]
param_txt <- str_split(header_txt[7], pattern = "\\s{1,}", simplify = TRUE)
param_txt <- param_txt[2:5]
header <- list("location" = location_txt,
"param_names" = param_txt,
"col_names" = col_txt,
"latitude" = position_lat,
"longitude" = position_lon)
}
input <- list(location = "lerwick",
param = "tmax",
baseline = "1991-2020",
st_year = as.numeric(str_sub(input$baseline,1,4)),
end_year = as.numeric(str_sub(input$baseline,6,9))
)
filename <- str_c(input$location,"data.txt")
header <- extract_header(filename)
data <- read.table(here::here("raw_data",filename), header = FALSE, skip = 7, comment.char = "P", fill = TRUE, flush = TRUE, col.names = header$col_names)
data$tmax <- strip_strings(data$tmax,c("\\*","\\#"))
data$tmax <- as.double(data$tmax)
data$tmin <- strip_strings(data$tmin,c("\\*","\\#"))
data$tmin <- as.double(data$tmin)
data$af <- strip_strings(data$af,c("\\*","\\#"))
data$af <- as.double(data$af)
data$rain <- strip_strings(data$rain,c("\\*","\\#"))
data$rain <- as.double(data$rain)
data$sun <- strip_strings(data$sun,c("\\*","\\#"))
data$sun <- as.double(data$sun)
data <- data %>%
mutate(location = str_to_lower(header$location))
avg_data <- data %>%
filter(location == input$location) %>%
filter(yyyy >= input$st_year & yyyy < input$end_year) %>%
group_by (mm) %>%
select(-yyyy) %>%
summarise(across(where(is.numeric),
~{median(.x, na.rm = TRUE)}))
max_data <- data %>%
filter(location == input$location) %>%
filter(yyyy >= input$st_year & yyyy < input$end_year) %>%
group_by (mm) %>%
select(-yyyy) %>%
summarise(across(where(is.numeric),
~{max(.x, na.rm = TRUE)}))
min_data <- data %>%
filter(location == input$location) %>%
filter(yyyy >= input$st_year & yyyy < input$end_year) %>%
group_by (mm) %>%
select(-yyyy) %>%
summarise(across(where(is.numeric),
~{min(.x, na.rm = TRUE)}))
met_data = pivot_longer(data, c(tmax,tmin,af,rain,sun),
names_to = "param",
values_to = "data")
met_avg = pivot_longer(avg_data, c(tmax,tmin,af,rain,sun),
names_to = "param",
values_to = "mnth_avg_data")
met_min = pivot_longer(min_data, c(tmax,tmin,af,rain,sun),
names_to = "param",
values_to = "mnth_min_data")
met_max = pivot_longer(max_data, c(tmax,tmin,af,rain,sun),
names_to = "param",
values_to = "mnth_max_data")
avg_merge = merge(met_avg,met_max)
avg_merge = merge(avg_merge,met_min)
avg_merge = merge(met_avg,met_max)
avg_merge = merge(avg_merge,met_min)
rem (met_avg,met_max,met_min)
avg_merge = merge(met_avg,met_max)
avg_merge = merge(avg_merge,met_min)
rm (met_avg,met_max,met_min)
rm(avg_data,max_data,min_data)
rm (met_avg,met_max,met_min)
library(tidyverse)
library(janitor)
library(colorfindr)
library(lubridate)
strip_strings <- function(old_column, strings){
cleaned <- old_column
# order strings longest first so "string within string" is not a problem
order <- sort(nchar(strings), decreasing=TRUE, index.return=TRUE)
strings <- strings[order$ix]
for (badstring in strings){
cleaned <- str_remove(cleaned,str_c(" ",badstring))
#adding this doesnt allow for a string to be 'embedded'
cleaned <- str_trim(cleaned)
}
return(cleaned)
}
extract_header <- function(filename){
#filename <-  "lerwickdata.txt"
header_txt <- read_lines(here::here("raw_data",filename),n_max = 7)
location_txt <- header_txt[1]
position_lat <- str_extract(header_txt[2], "Lat\\s.{6}") #identify lat string
position_lat <- as.numeric(str_remove(position_lat,"Lat ")) #strip lat string
position_lon <- str_extract(header_txt[2], "Lon\\s.{6}") #identify lon string
position_lon <- as.numeric(str_remove(position_lon,"Lon ")) #strip lon string
col_txt <- str_split(header_txt[6], pattern = "\\s{1,}", simplify = TRUE)
col_txt <- col_txt[2:8]
param_txt <- str_split(header_txt[7], pattern = "\\s{1,}", simplify = TRUE)
param_txt <- param_txt[2:5]
header <- list("location" = location_txt,
"param_names" = param_txt,
"col_names" = col_txt,
"latitude" = position_lat,
"longitude" = position_lon)
}
input <- list(location = "lerwick",
param = "tmax",
baseline = "1991-2020",
st_year = as.numeric(str_sub(input$baseline,1,4)),
end_year = as.numeric(str_sub(input$baseline,6,9))
)
filename <- str_c(input$location,"data.txt")
header <- extract_header(filename)
data <- read.table(here::here("raw_data",filename), header = FALSE, skip = 7, comment.char = "P", fill = TRUE, flush = TRUE, col.names = header$col_names)
data$tmax <- strip_strings(data$tmax,c("\\*","\\#"))
data$tmax <- as.double(data$tmax)
data$tmin <- strip_strings(data$tmin,c("\\*","\\#"))
data$tmin <- as.double(data$tmin)
data$af <- strip_strings(data$af,c("\\*","\\#"))
data$af <- as.double(data$af)
data$rain <- strip_strings(data$rain,c("\\*","\\#"))
data$rain <- as.double(data$rain)
data$sun <- strip_strings(data$sun,c("\\*","\\#"))
data$sun <- as.double(data$sun)
data <- data %>%
mutate(location = str_to_lower(header$location))
avg_data <- data %>%
filter(location == input$location) %>%
filter(yyyy >= input$st_year & yyyy < input$end_year) %>%
group_by (mm) %>%
select(-yyyy) %>%
summarise(across(where(is.numeric),
~{median(.x, na.rm = TRUE)}))
max_data <- data %>%
filter(location == input$location) %>%
filter(yyyy >= input$st_year & yyyy < input$end_year) %>%
group_by (mm) %>%
select(-yyyy) %>%
summarise(across(where(is.numeric),
~{max(.x, na.rm = TRUE)}))
min_data <- data %>%
filter(location == input$location) %>%
filter(yyyy >= input$st_year & yyyy < input$end_year) %>%
group_by (mm) %>%
select(-yyyy) %>%
summarise(across(where(is.numeric),
~{min(.x, na.rm = TRUE)}))
met_data = pivot_longer(data, c(tmax,tmin,af,rain,sun),
names_to = "param",
values_to = "data")
met_avg = pivot_longer(avg_data, c(tmax,tmin,af,rain,sun),
names_to = "param",
values_to = "mnth_avg_data")
met_min = pivot_longer(min_data, c(tmax,tmin,af,rain,sun),
names_to = "param",
values_to = "mnth_min_data")
met_max = pivot_longer(max_data, c(tmax,tmin,af,rain,sun),
names_to = "param",
values_to = "mnth_max_data")
avg_merge = merge(met_avg,met_max)
avg_merge = merge(avg_merge,met_min)
rm(avg_data,max_data,min_data)
rm (met_avg,met_max,met_min)
library(tidyverse)
library(janitor)
library(colorfindr)
library(lubridate)
strip_strings <- function(old_column, strings){
cleaned <- old_column
# order strings longest first so "string within string" is not a problem
order <- sort(nchar(strings), decreasing=TRUE, index.return=TRUE)
strings <- strings[order$ix]
for (badstring in strings){
cleaned <- str_remove(cleaned,str_c(" ",badstring))
#adding this doesnt allow for a string to be 'embedded'
cleaned <- str_trim(cleaned)
}
return(cleaned)
}
extract_header <- function(filename){
#filename <-  "lerwickdata.txt"
header_txt <- read_lines(here::here("raw_data",filename),n_max = 7)
location_txt <- header_txt[1]
position_lat <- str_extract(header_txt[2], "Lat\\s.{6}") #identify lat string
position_lat <- as.numeric(str_remove(position_lat,"Lat ")) #strip lat string
position_lon <- str_extract(header_txt[2], "Lon\\s.{6}") #identify lon string
position_lon <- as.numeric(str_remove(position_lon,"Lon ")) #strip lon string
col_txt <- str_split(header_txt[6], pattern = "\\s{1,}", simplify = TRUE)
col_txt <- col_txt[2:8]
param_txt <- str_split(header_txt[7], pattern = "\\s{1,}", simplify = TRUE)
param_txt <- param_txt[2:5]
header <- list("location" = location_txt,
"param_names" = param_txt,
"col_names" = col_txt,
"latitude" = position_lat,
"longitude" = position_lon)
}
input <- list(location = "lerwick",
param = "tmax",
baseline = "1991-2020",
st_year = as.numeric(str_sub(input$baseline,1,4)),
end_year = as.numeric(str_sub(input$baseline,6,9))
)
all_met %>%
# create decimal year data for plotting
mutate(dec_year = yyyy.x+(mm-0.5)/12) %>%
# select param to plot
filter(param==input$param) %>%
ggplot() +
#geom_line(aes(x=dec_year, y = data)) +
#geom_line(aes(x=dec_year, y = mnth_avg_data), col = "gray") +
geom_line(aes(x = dec_year, y = anom_data), col = "red")
library(tidyverse)
library(janitor)
library(colorfindr)
library(lubridate)
strip_strings <- function(old_column, strings){
cleaned <- old_column
# order strings longest first so "string within string" is not a problem
order <- sort(nchar(strings), decreasing=TRUE, index.return=TRUE)
strings <- strings[order$ix]
for (badstring in strings){
cleaned <- str_remove(cleaned,str_c(" ",badstring))
#adding this doesnt allow for a string to be 'embedded'
cleaned <- str_trim(cleaned)
}
return(cleaned)
}
extract_header <- function(filename){
#filename <-  "lerwickdata.txt"
header_txt <- read_lines(here::here("raw_data",filename),n_max = 7)
location_txt <- header_txt[1]
position_lat <- str_extract(header_txt[2], "Lat\\s.{6}") #identify lat string
position_lat <- as.numeric(str_remove(position_lat,"Lat ")) #strip lat string
position_lon <- str_extract(header_txt[2], "Lon\\s.{6}") #identify lon string
position_lon <- as.numeric(str_remove(position_lon,"Lon ")) #strip lon string
col_txt <- str_split(header_txt[6], pattern = "\\s{1,}", simplify = TRUE)
col_txt <- col_txt[2:8]
param_txt <- str_split(header_txt[7], pattern = "\\s{1,}", simplify = TRUE)
param_txt <- param_txt[2:5]
header <- list("location" = location_txt,
"param_names" = param_txt,
"col_names" = col_txt,
"latitude" = position_lat,
"longitude" = position_lon)
}
input <- list(location = "lerwick",
param = "tmax",
baseline = "1991-2020",
st_year = as.numeric(str_sub(input$baseline,1,4)),
end_year = as.numeric(str_sub(input$baseline,6,9))
)
all_met = left_join(met_data,avg_merge, by = c("mm","param")) %>%
mutate(anom_data = data - mnth_avg_data)
all_met = left_join(met_data,avg_merge, by = c("mm","param"))
library(tidyverse)
library(janitor)
library(colorfindr)
library(lubridate)
strip_strings <- function(old_column, strings){
cleaned <- old_column
# order strings longest first so "string within string" is not a problem
order <- sort(nchar(strings), decreasing=TRUE, index.return=TRUE)
strings <- strings[order$ix]
for (badstring in strings){
cleaned <- str_remove(cleaned,str_c(" ",badstring))
#adding this doesnt allow for a string to be 'embedded'
cleaned <- str_trim(cleaned)
}
return(cleaned)
}
extract_header <- function(filename){
#filename <-  "lerwickdata.txt"
header_txt <- read_lines(here::here("raw_data",filename),n_max = 7)
location_txt <- header_txt[1]
position_lat <- str_extract(header_txt[2], "Lat\\s.{6}") #identify lat string
position_lat <- as.numeric(str_remove(position_lat,"Lat ")) #strip lat string
position_lon <- str_extract(header_txt[2], "Lon\\s.{6}") #identify lon string
position_lon <- as.numeric(str_remove(position_lon,"Lon ")) #strip lon string
col_txt <- str_split(header_txt[6], pattern = "\\s{1,}", simplify = TRUE)
col_txt <- col_txt[2:8]
param_txt <- str_split(header_txt[7], pattern = "\\s{1,}", simplify = TRUE)
param_txt <- param_txt[2:5]
header <- list("location" = location_txt,
"param_names" = param_txt,
"col_names" = col_txt,
"latitude" = position_lat,
"longitude" = position_lon)
}
input <- list(location = "lerwick",
param = "tmax",
baseline = "1991-2020",
st_year = as.numeric(str_sub(input$baseline,1,4)),
end_year = as.numeric(str_sub(input$baseline,6,9))
)
library(tidyverse)
library(janitor)
library(colorfindr)
library(lubridate)
strip_strings <- function(old_column, strings){
cleaned <- old_column
# order strings longest first so "string within string" is not a problem
order <- sort(nchar(strings), decreasing=TRUE, index.return=TRUE)
strings <- strings[order$ix]
for (badstring in strings){
cleaned <- str_remove(cleaned,str_c(" ",badstring))
#adding this doesnt allow for a string to be 'embedded'
cleaned <- str_trim(cleaned)
}
return(cleaned)
}
extract_header <- function(filename){
#filename <-  "lerwickdata.txt"
header_txt <- read_lines(here::here("raw_data",filename),n_max = 7)
location_txt <- header_txt[1]
position_lat <- str_extract(header_txt[2], "Lat\\s.{6}") #identify lat string
position_lat <- as.numeric(str_remove(position_lat,"Lat ")) #strip lat string
position_lon <- str_extract(header_txt[2], "Lon\\s.{6}") #identify lon string
position_lon <- as.numeric(str_remove(position_lon,"Lon ")) #strip lon string
col_txt <- str_split(header_txt[6], pattern = "\\s{1,}", simplify = TRUE)
col_txt <- col_txt[2:8]
param_txt <- str_split(header_txt[7], pattern = "\\s{1,}", simplify = TRUE)
param_txt <- param_txt[2:5]
header <- list("location" = location_txt,
"param_names" = param_txt,
"col_names" = col_txt,
"latitude" = position_lat,
"longitude" = position_lon)
}
input <- list(location = "lerwick",
param = "tmax",
baseline = "1991-2020",
st_year = as.numeric(str_sub(input$baseline,1,4)),
end_year = as.numeric(str_sub(input$baseline,6,9))
)
input <- list(location = "lerwick",
param = "tmax",
baseline = "1991-2020")
input <-input %>%
mutate(st_year = as.numeric(str_sub(baseline,1,4))) %>%
mutate(end_year = as.numeric(str_sub(baseline,6,9)))
input <- input %>%
mutate(st_year = as.numeric(str_sub(baseline,1,4))) %>%
mutate(end_year = as.numeric(str_sub(baseline,6,9)))
input$st_year = as.numeric(str_sub(input$baseline,1,4)))
input$st_year = as.numeric(str_sub(input$baseline,1,4))
input <- list(location = "lerwick",
param = "tmax",
baseline = "1991-2020")
input$st_year = as.numeric(str_sub(input$baseline,1,4))
input$end_year = as.numeric(str_sub(input$baseline,6,9))
input <- list(location = "lerwick",
param = "tmax",
baseline = "1991-2020")
input$st_year = as.numeric(str_sub(input$baseline,1,4))
input$end_year = as.numeric(str_sub(input$baseline,6,9))
filename <- str_c(input$location,"data.txt")
header <- extract_header(filename)
data <- read.table(here::here("raw_data",filename), header = FALSE, skip = 7, comment.char = "P", fill = TRUE, flush = TRUE, col.names = header$col_names)
data$tmax <- strip_strings(data$tmax,c("\\*","\\#"))
data$tmax <- as.double(data$tmax)
data$tmin <- strip_strings(data$tmin,c("\\*","\\#"))
data$tmin <- as.double(data$tmin)
data$af <- strip_strings(data$af,c("\\*","\\#"))
data$af <- as.double(data$af)
data$rain <- strip_strings(data$rain,c("\\*","\\#"))
data$rain <- as.double(data$rain)
data$sun <- strip_strings(data$sun,c("\\*","\\#"))
data$sun <- as.double(data$sun)
data <- data %>%
mutate(location = str_to_lower(header$location))
rm(header)
avg_data <- data %>%
filter(location == input$location) %>%
filter(yyyy >= input$st_year & yyyy < input$end_year) %>%
group_by (mm) %>%
select(-yyyy) %>%
summarise(across(where(is.numeric),
~{median(.x, na.rm = TRUE)}))
max_data <- data %>%
filter(location == input$location) %>%
filter(yyyy >= input$st_year & yyyy < input$end_year) %>%
group_by (mm) %>%
select(-yyyy) %>%
summarise(across(where(is.numeric),
~{max(.x, na.rm = TRUE)}))
min_data <- data %>%
filter(location == input$location) %>%
filter(yyyy >= input$st_year & yyyy < input$end_year) %>%
group_by (mm) %>%
select(-yyyy) %>%
summarise(across(where(is.numeric),
~{min(.x, na.rm = TRUE)}))
met_data = pivot_longer(data, c(tmax,tmin,af,rain,sun),
names_to = "param",
values_to = "data")
met_avg = pivot_longer(avg_data, c(tmax,tmin,af,rain,sun),
names_to = "param",
values_to = "mnth_avg_data")
met_min = pivot_longer(min_data, c(tmax,tmin,af,rain,sun),
names_to = "param",
values_to = "mnth_min_data")
avg_merge = merge(met_avg,met_max)
met_max = pivot_longer(max_data, c(tmax,tmin,af,rain,sun),
names_to = "param",
values_to = "mnth_max_data")
avg_merge = merge(met_avg,met_max)
avg_merge = merge(avg_merge,met_min)
rm(data,avg_data,max_data,min_data)
rm (met_avg,met_max,met_min)
all_met = left_join(met_data,avg_merge, by = c("mm","param")) %>%
mutate(anom_data = data - mnth_avg_data)
all_met %>%
# create decimal year data for plotting
mutate(dec_year = yyyy.x+(mm-0.5)/12) %>%
# select param to plot
filter(param==input$param) %>%
ggplot() +
#geom_line(aes(x=dec_year, y = data)) +
#geom_line(aes(x=dec_year, y = mnth_avg_data), col = "gray") +
geom_line(aes(x = dec_year, y = anom_data), col = "red")
all_met %>%
# create decimal year data for plotting
mutate(dec_year = yyyy+(mm-0.5)/12) %>%
# select param to plot
filter(param==input$param) %>%
ggplot() +
#geom_line(aes(x=dec_year, y = data)) +
#geom_line(aes(x=dec_year, y = mnth_avg_data), col = "gray") +
geom_line(aes(x = dec_year, y = anom_data), col = "red")
